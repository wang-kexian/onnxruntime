parameters:
  BuildArch: 'x64'
  Runtime: 'dynamic'

jobs:
- job: Windows_Packaging_${{ parameters.BuildArch }}
  steps:
    - ${{ if eq(parameters.BuildArch, 'x64') }}:
      - task: NuGetCommand@2
        displayName: 'NuGet restore'
        inputs:
          feedsToUse: config
          nugetConfigPath: NuGet.config
          restoreDirectory: '$(Build.BinariesDirectory)'
          restoreSolution: $(Build.BinariesDirectory)\.pipelines\nuget_config\x64\packages.config


    - script: |
        echo '##vso[task.setvariable variable=path]$(Build.BinariesDirectory)\python.3.9.10\tools;$(PATH)'
    - script: |
        where python
    - script: |
        @echo off
        set vswherepath="%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
        for /f "usebackq delims=" %%i in (`%vswherepath% -latest -property installationPath`) do (
          set vslatest="%%i"
          if exist "%%i\Common7\Tools\vsdevcmd.bat" (
            set vsdevcmd="%%i\Common7\Tools\vsdevcmd.bat"
          )
        )
        
        @echo vslatest %vslatest%
        @echo vsdevcmd %vsdevcmd%
        
        @echo ##vso[task.setvariable variable=vslatest]%vslatest%
        @echo ##vso[task.setvariable variable=vsdevcmd]%vsdevcmd%
      displayName: 'locate vsdevcmd via vswhere'

    - powershell: |
       Write-Host "##vso[task.setvariable variable=BuildFlags]"
       Write-Host "##vso[task.setvariable variable=ArtifactName]Microsoft.AI.MachineLearning.${{ parameters.BuildArch }}"
      displayName: Initialize build flags

    - powershell: |
       Write-Host "##vso[task.setvariable variable=BuildFlags]$(BuildFlags) --${{ parameters.BuildArch }}"
      displayName: Add cross compilation flags for ARM
      condition: and(ne('${{ parameters.BuildArch }}', 'x64'), ne('${{ parameters.BuildArch }}', 'x86'))

    - powershell: |
       Write-Host "##vso[task.setvariable variable=BuildFlags]$(BuildFlags) --enable_wcos"
      displayName: Add OneCore flags

    - powershell: |
       Write-Host "##vso[task.setvariable variable=BuildFlags]$(BuildFlags) --enable_msvc_static_runtime"
       Write-Host "##vso[task.setvariable variable=ArtifactName]$(ArtifactName).StaticRuntime"
      displayName: Add static runtime flags
      condition: eq('${{ parameters.Runtime }}', 'static')

    - task: PythonScript@0
      displayName: 'Generate CMake Configuration'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
        arguments: '--build_dir $(Build.BinariesDirectory) --build_shared_lib --enable_onnx_tests $(TelemetryOption) --ms_experimental --use_dml --use_winml --cmake_generator "Visual Studio 16 2019" --update --config RelWithDebInfo --enable_lto --disable_rtti $(BuildFlags) --cmake_extra_defines CMAKE_SYSTEM_VERSION=10.0.19041.0'
        workingDirectory: '$(Build.BinariesDirectory)'

    - task: VSBuild@1
      displayName: 'Build'
      inputs:
        solution: '$(Build.BinariesDirectory)\RelWithDebInfo\onnxruntime.sln'
        ${{ if ne(parameters.BuildArch, 'x86') }}:
          platform: ${{ parameters.BuildArch }}
        ${{ if eq(parameters.BuildArch, 'x86') }}:
          platform: 'Win32'
        configuration: RelWithDebInfo
        msbuildArchitecture: ${{ parameters.BuildArch }}
        maximumCpuCount: true
        logProjectEvents: true
        workingFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'
        createLogFile: true 
